// Generated by CoffeeScript 1.8.0
(function() {
  var backgroundToShow, boardIsFull, buildBoard, collapseCells, currentScore, generateTile, getBiggestNumber, getColumn, getRow, isGameOver, mergeCells, move, moveIsValid, noValidMoves, printArray, quoteToShow, randomCellIndices, randomInt, randomQuote, randomValue, restartGame, setColumn, setRow, showBoard,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  randomInt = function(x) {
    return Math.floor(Math.random() * x);
  };

  buildBoard = function() {
    return [0, 1, 2, 3].map(function() {
      return [0, 1, 2, 3].map(function() {
        return 0;
      });
    });
  };

  randomCellIndices = function() {
    return [randomInt(4), randomInt(4)];
  };

  randomValue = function() {
    var values;
    values = [2, 2, 2, 4];
    return values[randomInt(4)];
  };

  generateTile = function(board) {
    var column, row, value, _ref;
    value = randomValue();
    _ref = randomCellIndices(), row = _ref[0], column = _ref[1];
    console.log("row: " + row + " / col: " + column);
    if (board[row][column] === 0) {
      board[row][column] = value;
    } else {
      generateTile(board);
    }
    return console.log("generate tile");
  };

  move = function(board, direction) {
    var column, i, newBoard, row, _i;
    newBoard = buildBoard();
    for (i = _i = 0; _i <= 3; i = ++_i) {
      if (direction === 'right' || direction === 'left') {
        row = getRow(i, board);
        row = mergeCells(row, direction);
        row = collapseCells(row, direction);
        setRow(row, i, newBoard);
      } else if (direction === 'down' || direction === 'up') {
        column = getColumn(i, board);
        column = mergeCells(column, direction);
        column = collapseCells(column, direction);
        setColumn(column, i, newBoard);
      }
    }
    return newBoard;
  };

  getRow = function(r, board) {
    return [board[r][0], board[r][1], board[r][2], board[r][3]];
  };

  setRow = function(row, index, board) {
    return board[index] = row;
  };

  getColumn = function(c, board) {
    return [board[0][c], board[1][c], board[2][c], board[3][c]];
  };

  setColumn = function(column, index, board) {
    var i, _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      _results.push(board[i][index] = column[i]);
    }
    return _results;
  };

  mergeCells = function(cells, direction) {
    var merge;
    merge = function(cells) {
      var a, b, _i, _j, _ref;
      for (a = _i = 3; _i > 0; a = --_i) {
        for (b = _j = _ref = a - 1; _ref <= 0 ? _j <= 0 : _j >= 0; b = _ref <= 0 ? ++_j : --_j) {
          if (cells[a] === 0) {
            break;
          } else if (cells[a] === cells[b]) {
            cells[a] *= 2;
            cells[b] = 0;
            break;
          } else if (cells[b] !== 0) {
            break;
          } else if (cells[b] !== 0) {
            break;
          }
        }
      }
      return cells;
    };
    if (direction === 'right' || direction === 'down') {
      cells = merge(cells);
    } else if (direction === 'left' || direction === 'up') {
      cells = merge(cells.reverse()).reverse();
    }
    return cells;
  };

  collapseCells = function(row, direction) {
    row = row.filter(function(x) {
      return x !== 0;
    });
    while (row.length < 4) {
      if (direction === 'right' || direction === 'down') {
        row.unshift(0);
      } else if (direction === 'left' || direction === 'up') {
        row.push(0);
      }
    }
    return row;
  };

  moveIsValid = function(originalBoard, newBoard) {
    var col, row, _i, _j;
    for (row = _i = 0; _i <= 3; row = ++_i) {
      for (col = _j = 0; _j <= 3; col = ++_j) {
        if (originalBoard[row][col] !== newBoard[row][col]) {
          return true;
        }
      }
    }
    return false;
  };

  boardIsFull = function(board) {
    var row, _i, _len;
    for (_i = 0, _len = board.length; _i < _len; _i++) {
      row = board[_i];
      if (__indexOf.call(row, 0) >= 0) {
        return false;
      }
    }
    return true;
  };

  noValidMoves = function(board) {
    var direction, newBoard, _i, _len, _ref;
    _ref = ['up', 'down', 'left', 'right'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      direction = _ref[_i];
      newBoard = move(board, direction);
      if (moveIsValid(board, newBoard)) {
        return false;
      }
    }
    return true;
  };

  isGameOver = function(board) {
    return boardIsFull(board) && noValidMoves(board);
  };

  showBoard = function(board) {
    var col, power, row, _i, _results;
    _results = [];
    for (row = _i = 0; _i <= 3; row = ++_i) {
      _results.push((function() {
        var _j, _k, _results1;
        _results1 = [];
        for (col = _j = 0; _j <= 3; col = ++_j) {
          for (power = _k = 1; _k <= 11; power = ++_k) {
            $(".r" + row + ".c" + col).removeClass('val-' + Math.pow(2, power));
          }
          if (board[row][col] === 0) {
            _results1.push($(".r" + row + ".c" + col + " > div").html(''));
          } else {
            $(".r" + row + ".c" + col + " > div").html(board[row][col]);
            _results1.push($(".r" + row + ".c" + col).addClass('val-' + board[row][col]));
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  printArray = function(array) {
    var row, _i, _len;
    console.log("-- Start --");
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      row = array[_i];
      console.log(row);
    }
    return console.log("-- End --");
  };

  restartGame = function() {
    return window.location.reload();
  };

  randomQuote = function() {
    var quotes, size;
    quotes = ["fetch", "None for Gretchen Weiners", "So you think you're really pretty", "You can't sit with us"];
    size = quotes.length;
    return quotes[randomInt(size)];
  };

  quoteToShow = function(number) {
    switch (number) {
      case 2:
        return "She is one of the dumbest girls you will ever meet.";
      case 4:
        return "That's so fetch!";
      case 8:
        return "Get in loser, we're going shopping.";
      case 16:
        return "She doesn't even go here!";
      case 32:
        return "We wear pink on Wednesdays.";
      case 64:
        return "Is butter a carb?";
      case 128:
        return "So you think you're really pretty";
      case 256:
        return "I'm a mouse. Duh.";
      case 512:
        return "I hate my pores.";
      case 1024:
        return "You girls keep me young.";
      case 2048:
        return "That's why her hair is so big, it's full of secrets!";
    }
  };

  getBiggestNumber = function(board) {
    var biggestSeenSoFar, row, value, _i, _j, _len, _len1;
    biggestSeenSoFar = 0;
    for (_i = 0, _len = board.length; _i < _len; _i++) {
      row = board[_i];
      for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
        value = row[_j];
        if (value > biggestSeenSoFar) {
          biggestSeenSoFar = value;
        }
      }
    }
    return biggestSeenSoFar;
  };

  backgroundToShow = function(background) {
    switch (background) {
      case 2:
        return "../images/plastics.jpg";
      case 4:
        return "../images/bg4.jpg";
      case 8:
        return "../images/bg8.jpg";
      case 16:
        return "../images/bg16.jpg";
      case 32:
        return "../images/bg32.jpg";
      case 64:
        return "../images/bg64.jpg";
      case 128:
        return "../images/bg128.jpg";
      case 256:
        return "../images/bg256.jpg";
      case 512:
        return "../images/bg512.jpg";
      case 1024:
        return "../images/bg1024.jpg";
      case 2048:
        return "../images/bg2048.jpg";
    }
  };

  currentScore = function(board) {
    var array, element, score, _i, _j, _len, _len1;
    score = 0;
    for (_i = 0, _len = board.length; _i < _len; _i++) {
      array = board[_i];
      for (_j = 0, _len1 = array.length; _j < _len1; _j++) {
        element = array[_j];
        score += element;
      }
    }
    return score;
  };

  $(function() {
    var biggestNumber;
    $('.board').hide();
    $('.board').fadeIn(5000);
    this.board = buildBoard();
    this.board = buildBoard();
    generateTile(this.board);
    generateTile(this.board);
    biggestNumber = getBiggestNumber(this.board);
    showBoard(this.board);
    $('#restart_game').click(restartGame);
    return $('body').keydown((function(_this) {
      return function(e) {
        var direction, key, keys, newBoard;
        key = e.which;
        keys = [37, 38, 39, 40];
        if (__indexOf.call(keys, key) >= 0) {
          e.preventDefault();
          direction = (function() {
            switch (key) {
              case 37:
                return 'left';
              case 38:
                return 'up';
              case 39:
                return 'right';
              case 40:
                return 'down';
            }
          })();
          newBoard = move(_this.board, direction);
          printArray(newBoard);
          if (moveIsValid(_this.board, newBoard)) {
            console.log("valid");
            _this.board = newBoard;
            generateTile(_this.board);
            showBoard(_this.board);
            $(".actual-quote").html(quoteToShow(getBiggestNumber(_this.board)));
            $("body").css('background-image', 'url(' + backgroundToShow(getBiggestNumber(_this.board)) + ')');
            $(".actual-score").html(currentScore(_this.board));
            if (isGameOver(_this.board)) {
              return alert("You can't sit with us!");
            } else {
              return showBoard(_this.board);
            }
          } else {
            return console.log("invalid");
          }
        } else {

        }
      };
    })(this));
  });

}).call(this);

//# sourceMappingURL=main.js.map
